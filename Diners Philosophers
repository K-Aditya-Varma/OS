#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
sem_t* forks;
sem_t mutex;
void* philosopher(void* num)
{
    int id = *(int *)num;
    printf("P %d is waiting\n", id);
    sem_wait(&mutex);
    printf("P %d is granted to eat\n", id);
    sem_wait(&forks[id]);
    sem_wait(&forks[(id + 1) % 5]);
    sem_post(&mutex);
    sleep(1);
    sem_post(&forks[id]);
    sem_post(&forks[(id + 1) % 5]);
    return NULL;
}
int main()
{
    int np, nh;
    printf("DINING PHILOSOPHER PROBLEM\n");
    printf("Enter no of philosophers: ");
    scanf("%d", &np);
    printf("How many are hungry: ");
    scanf("%d", &nh);
    int h[nh];
    for (int i = 0; i < nh; i++)
    {
        printf("Enter philosopher %d position: ", i + 1);
        scanf("%d", &h[i]);
        h[i]--;
    }
    forks = (sem_t*)malloc(np * sizeof(sem_t));
    pthread_t p[nh];
    int ids[nh];
    for (int i = 0; i < np; i++)
    {
        sem_init(&forks[i], 0, 1);
    }
    sem_init(&mutex, 0, 1);
    for (int i = 0; i < nh; i++)
    {
        ids[i] = h[i];
        pthread_create(&p[i], NULL, philosopher, &ids[i]);
    }
    for (int i = 0; i < nh; i++)
    {
        pthread_join(p[i], NULL);
    }

    for (int i = 0; i < np; i++)
    {
        sem_destroy(&forks[i]);
    }
    sem_destroy(&mutex);
    free(forks);
    return 0;
}
